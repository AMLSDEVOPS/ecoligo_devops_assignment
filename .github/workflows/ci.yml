# CI pipeline for ecoligo FastAPI application
# Runs on PRs and pushes to main/dev branches

name: Application CI

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]

jobs:
  test-and-validate:
    name: Test and Validate Build
    runs-on: self-hosted
    
    steps:
    # Get the code
    - name: Check out repository
      uses: actions/checkout@v4
      
    # Set up Python environment  
    - name: Setup Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    # Install dependencies - using pip since it's more reliable in CI
    - name: Install Python packages
      run: |
        pip install -r requirements.txt
        # Make sure we have pytest for running tests
        pip install pytest pytest-cov
        
    # Run the test suite that already exists in the project
    - name: Run test suite
      run: |
        # Using the existing Makefile target for tests
        make unittest
      
    # Quick sanity check that the app loads properly
    - name: Verify application loads
      run: |
        echo "Checking if application modules can be imported..."
        python -c "from app.main import app; print('FastAPI app loads OK')"
        python -c "from app.api import api; print('API module loads OK')"
        echo "Application structure looks good"
        
    # Build Docker image if Docker is available
    - name: Build container image
      run: |
        # Check if we have Docker available on this runner
        if ! command -v docker >/dev/null 2>&1; then
          echo "Docker not found on this runner, skipping container build"
          exit 0
        fi
        
        echo "Building Docker image..."
        docker build -t ecoligo-app:${GITHUB_SHA:0:8} .
        
        echo "Testing basic container functionality..."
        docker run --rm ecoligo-app:${GITHUB_SHA:0:8} python -c "import app; print('App works in container')"
        
    # Test the cronjob script that processes questions
    - name: Test cronjob script
      run: |
        cd scripts
        python hourly_cronjob.py
        echo "Cronjob script executed successfully"
        
    # Final validation
    - name: CI completion check
      run: |
        echo "CI pipeline completed successfully"
        echo "Application is ready for deployment"
