# Production deployment pipeline for ecoligo application
# Deploys to EKS when we push to main branch

name: Production Deployment

on:
  push:
    branches: [main]

# Using your actual AWS regions and repository names
env:
  EKS_REGION: us-east-1
  ECR_REGION: ap-south-1
  ECR_REGISTRY: 398803372580.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY: ecoligovenkat
  EKS_CLUSTER: corporate-secondary
  NAMESPACE: ecoligo-production
  APP_NAME: ecoligo-app

jobs:
  # Build and push the container image to ECR
  build-and-push:
    name: Build Container and Push to ECR
    runs-on: self-hosted
    
    outputs:
      image_tag: ${{ steps.tag.outputs.short_sha }}
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials for ECR
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECR_REGION }}
        
    - name: Login to ECR
      run: |
        aws ecr get-login-password --region ${{ env.ECR_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
        
    - name: Generate image tag
      id: tag
      run: |
        # Use short git SHA for the tag
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "Using image tag: $SHORT_SHA"
        
    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tag.outputs.short_sha }} .
        
    - name: Push image to ECR
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tag.outputs.short_sha }}
        
    - name: Also tag as latest and push
      run: |
        docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tag.outputs.short_sha }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  # Deploy to Kubernetes cluster
  deploy-to-kubernetes:
    name: Deploy to EKS Cluster
    runs-on: self-hosted
    needs: build-and-push
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials for EKS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.EKS_REGION }}
        
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.EKS_REGION }} \
          --name ${{ env.EKS_CLUSTER }}
          
    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy application
      run: |
        # Apply our Kubernetes deployment
        kubectl apply -f kubernetes/manifests/ -n ${{ env.NAMESPACE }}
        
    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to complete..."
        kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=180s
        
    - name: Check deployment status
      run: |
        echo "=== Deployment Status ==="
        kubectl get deployments -n ${{ env.NAMESPACE }}
        echo ""
        echo "=== Pods ==="
        kubectl get pods -n ${{ env.NAMESPACE }}
        echo ""
        echo "=== Services ==="
        kubectl get services -n ${{ env.NAMESPACE }}
        
    - name: Simple application test
      run: |
        # Wait a bit for the LoadBalancer to provision
        sleep 30
        echo "Testing application..."
        # Get the service endpoint
        kubectl get svc ${{ env.APP_NAME }} -n ${{ env.NAMESPACE }}
