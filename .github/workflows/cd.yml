name: CD Pipeline - Production Deployment

on:
  push:
    branches: [main]

env:
  CLUSTER_NAME: corporate-secondary
  AWS_REGION: us-east-1
  ECR_REGION: ap-south-1
  ECR_REGISTRY: 398803372580.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPO: ecoligovenkat
  NAMESPACE: ecoligo-production

jobs:
  build-and-push:
    name: Build and Push Container
    runs-on: self-hosted
    
    outputs:
      image_tag: ${{ steps.tag.outputs.sha }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials for ECR
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECR_REGION }}
        
    - name: Login to ECR
      run: |
        aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        
    - name: Generate unique image tag
      id: tag
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%s)
        # Combine SHA and timestamp to ensure uniqueness
        UNIQUE_TAG="${SHORT_SHA}-${TIMESTAMP}"
        echo "sha=$UNIQUE_TAG" >> $GITHUB_OUTPUT
        echo "Using unique image tag: $UNIQUE_TAG"
        
    - name: Build Docker image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO:${{ steps.tag.outputs.sha }} .
        
    - name: Push image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPO:${{ steps.tag.outputs.sha }}
        echo "Successfully pushed image: $ECR_REGISTRY/$ECR_REPO:${{ steps.tag.outputs.sha }}"

  deploy-with-helm:
    name: Deploy with Helm
    runs-on: self-hosted
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS for EKS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Connect to EKS cluster
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        
    - name: Create namespace if needed
      run: |
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Clean up existing conflicting resources
      run: |
        echo "Checking for existing resources that might conflict with Helm..."
        # Only delete if they exist and don't have Helm labels
        kubectl get service ecoligo-app -n $NAMESPACE > /dev/null 2>&1 && \
          kubectl get service ecoligo-app -n $NAMESPACE -o jsonpath='{.metadata.labels.app\.kubernetes\.io/managed-by}' | grep -q Helm || \
          kubectl delete service ecoligo-app -n $NAMESPACE --ignore-not-found=true
        
        kubectl get deployment ecoligo-app -n $NAMESPACE > /dev/null 2>&1 && \
          kubectl get deployment ecoligo-app -n $NAMESPACE -o jsonpath='{.metadata.labels.app\.kubernetes\.io/managed-by}' | grep -q Helm || \
          kubectl delete deployment ecoligo-app -n $NAMESPACE --ignore-not-found=true
        
        kubectl get cronjob ecoligo-app-cron -n $NAMESPACE > /dev/null 2>&1 && \
          kubectl get cronjob ecoligo-app-cron -n $NAMESPACE -o jsonpath='{.metadata.labels.app\.kubernetes\.io/managed-by}' | grep -q Helm || \
          kubectl delete cronjob ecoligo-app-cron -n $NAMESPACE --ignore-not-found=true
        
        echo "Cleanup check completed"
        
    - name: Deploy using Helm
      run: |
        helm upgrade --install ecoligo-app ./kubernetes/helm/ecoligo-app \
          --set image.tag=${{ needs.build-and-push.outputs.image_tag }} \
          --namespace $NAMESPACE \
          --timeout 10m \
          --atomic \
          --wait
        
    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl rollout status deployment/ecoligo-app -n $NAMESPACE --timeout=300s
        echo "Deployment successful!"
        
    - name: Check all resources
      run: |
        echo "=== Helm Release ==="
        helm list -n $NAMESPACE
        echo ""
        echo "=== Pods ==="
        kubectl get pods -n $NAMESPACE -l app=ecoligo-app
        echo ""
        echo "=== Services ==="
        kubectl get svc -n $NAMESPACE -l app=ecoligo-app
        echo ""
        echo "=== CronJobs ==="
        kubectl get cronjobs -n $NAMESPACE -l app=ecoligo-app
        echo ""
        echo "=== HPA ==="
        kubectl get hpa -n $NAMESPACE -l app=ecoligo-app || echo "HPA not found yet"
        
    - name: CD completion
      run: |
        echo "CD pipeline completed successfully"
        echo "Application deployed to production"
